# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# "timestamp" template function replacement
locals { 
  timestamp = formatdate("YYYY-MM-DD hh:mm ZZZ", timestamp())
  autounattend = templatefile("${abspath(path.root)}/autounattend.pkrtpl.hcl", {
    windows_product_key = var.windows_product_key,
    admin_username      = var.admin_username,
    admin_password      = var.admin_password,
    organization        = var.organization,
    fullname            = var.fullname
  })
  network = templatefile("${abspath(path.root)}/scripts/network.pkrtpl.hcl", {
    ip_address    = var.ip_address,
    prefixLength  = var.prefixLength,
    primary_dns   = var.primary_dns,
    secondary_dns = var.secondary_dns,
    gateway       = var.gateway,
    proxy         = var.proxy
  })
  }

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source


packer {
  required_version = ">= 1.6.0"
  required_plugins {
    vsphere = {
      version = " >= v1.0.3"
      source  = "github.com/hashicorp/vsphere"
    }
  }
  required_plugins {
    windows-update = {
      version = " >= 0.14.0"
      source  = "github.com/rgl/windows-update"
    }
  }
}




source "vsphere-iso" "winserv2019-core" {
  CPUs                 = var.vm_cpu_num
  RAM                  = var.vm_mem_size
  cluster              = var.vcenter_cluster
  communicator         = "winrm"
  convert_to_template  = "true"
  datastore            = var.vcenter_datastore
  disk_controller_type = ["lsilogic-sas"]
  floppy_files         = ["scripts/enable-winrm.ps1", "scripts/vmtools.cmd"]
  floppy_content       = {
    "autounattend.xml" = local.autounattend,
    "network.ps1"      = local.network
  }
  
  folder               = var.vcenter_folder
  guest_os_type        = "windows9Server64Guest"
  host                 = var.vcenter_host
  insecure_connection  = "true"
  ip_wait_timeout      = var.vm_ip_timeout
  iso_paths            = [var.os_iso_path, "[] /vmimages/tools-isoimages/windows.iso"]
  network_adapters {
    network      = var.vcenter_network
    network_card = var.vm_nic_type
  }
  notes    = "constru√≠do com Packer em ${local.timestamp}"
  password = var.vcenter_password
  storage {
    disk_size             = var.vm_disk_size
    disk_thin_provisioned = false
  }
  username       = var.vcenter_username
  vcenter_server = var.vcenter_server
  vm_name        = var.vm_name
  winrm_password = var.admin_password
  winrm_timeout  = var.vm_ip_timeout
  winrm_username = var.admin_username
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.vsphere-iso.winserv2019-core"]
  
  provisioner "windows-update" {
        pause_before        = "30s"
        search_criteria     = "IsInstalled=0"
        filters             = [ "exclude:$_.Title -like '*VMware*'",
                                "exclude:$_.Title -like '*Preview*'",
                                "exclude:$_.Title -like '*Defender*'",
                                "exclude:$_.InstallationBehavior.CanRequestUserInput",
                                "include:$true" ]
        restart_timeout     = "120m"
    } 
  
  provisioner "windows-shell" {
    inline = ["netsh winhttp reset proxy"]
  }


}
